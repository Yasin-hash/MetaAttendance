from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from attendance.models import Student, Faculty  # Убедитесь, что импортируете правильные модели
from django.db import IntegrityError  # Импортируем IntegrityError
import random
import string

class Command(BaseCommand):
    help = 'Добавить студентов в базу данных'

    """
    Management command to add students to the database

    This command takes no arguments and generates a student for each name in the
    list of students data. The username is generated by taking the first part of
    the student's name and appending a number if that username already exists.
    The password is randomly generated. The faculty is looked up or created.

    The command outputs the name and password for each student as it is added.
    If there is an error adding a student, the command outputs an error message.
    """
    
    def handle(self, *args, **kwargs):
        students = [
    "Абдулла Бектур Таалайбекулы",
    "Абдырахимова Камиля Абдырахимовна",
    "Айткулова Кенжегул Жайлообековна",
    "Айылчиева Улара Жеңишбековна",
    "Акматбекова Ширин Нурланбековна",
    "Асаналиев Нурмухаммед Каныбекович",
    "Асанбекова Касиет Нурлановна",
    "Ашимбекова Айпери Нурдиновна",
    "Баратбаев Мухаммадзокир",
    "Борошова Асема Талантбековна",
    "Ванинова Альфия Салировна",
    "Жумакадыров Алинур Амангельдиевич",
    "Койчубеков Нурадиль Эмильевич",
    "Мамаева Надия Руслановна",
    "Мукашова Бегимай Дыйканбековна",
    "Мусабаева Сезим Сыймыковна",
    "Мусаева Зухра Равшановна",
    "Намаева Айтурган Шералиевна",
    "Орозбекова Аяна Акылбековна",
    "Русланбеков Нурдөөлөт Русланбекович",
    "Сеитмуратов Али Султанбекович",
    "Султаналиева Нурдана Данияровна",
    "Сыдыгалиева Фатима Садырбековна",
    "Мамытова Айгерим Ринатовна",
    "Осконбеков Арлес Талантбекович"
]


        for student_name in students:  # Change 'students_data' to 'students'
            # Generate username
            username = student_name.split()[0]
            count = 1
            while User.objects.filter(username=username).exists():
                username = f"{student_name.split()[0]}_{count}"
                count += 1

            # Generate password
            password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))

            try:
                # Create user
                user = User.objects.create_user(username=username, password=password)

                # Find or create faculty 'ИИ-24-09'
                faculty, created = Faculty.objects.get_or_create(name='ИЯ-24-09')

                # Create student with faculty object
                Student.objects.create(user=user, faculty=faculty)
                self.stdout.write(self.style.SUCCESS(f"Студент: {student_name} добавлен с паролем: {password}"))
            except IntegrityError as e:
                self.stdout.write(self.style.ERROR(f"Ошибка добавления {student_name}: {str(e)}"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"Неизвестная ошибка при добавлении {student_name}: {str(e)}"))